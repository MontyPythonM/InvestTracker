// <auto-generated />
using System;
using InvestTracker.Offers.Core.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InvestTracker.Offers.Core.Persistence.Migrations
{
    [DbContext(typeof(OffersDbContext))]
    [Migration("20230624234651_Extend_Offer_Price_Precision")]
    partial class Extend_Offer_Price_Precision
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("offers")
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InvestTracker.Offers.Core.Entities.Advisor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Advisors", "offers");
                });

            modelBuilder.Entity("InvestTracker.Offers.Core.Entities.Collaboration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdvisorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InvestmentStrategyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InvestorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("InvestmentStrategyId");

                    b.HasIndex("InvestorId");

                    b.ToTable("Collaborations", "offers");
                });

            modelBuilder.Entity("InvestTracker.Offers.Core.Entities.InvestmentStrategy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("InvestmentStrategies", "offers");
                });

            modelBuilder.Entity("InvestTracker.Offers.Core.Entities.Investor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Investors", "offers");
                });

            modelBuilder.Entity("InvestTracker.Offers.Core.Entities.Offer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdvisorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(3000)
                        .HasColumnType("character varying(3000)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorId");

                    b.ToTable("Offers", "offers");
                });

            modelBuilder.Entity("InvestTracker.Offers.Core.Entities.Collaboration", b =>
                {
                    b.HasOne("InvestTracker.Offers.Core.Entities.Advisor", "Advisor")
                        .WithMany("Collaborations")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvestTracker.Offers.Core.Entities.InvestmentStrategy", "InvestmentStrategy")
                        .WithMany("Collaborations")
                        .HasForeignKey("InvestmentStrategyId");

                    b.HasOne("InvestTracker.Offers.Core.Entities.Investor", "Investor")
                        .WithMany("Collaborations")
                        .HasForeignKey("InvestorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("InvestmentStrategy");

                    b.Navigation("Investor");
                });

            modelBuilder.Entity("InvestTracker.Offers.Core.Entities.Offer", b =>
                {
                    b.HasOne("InvestTracker.Offers.Core.Entities.Advisor", "Advisor")
                        .WithMany("Offers")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advisor");
                });

            modelBuilder.Entity("InvestTracker.Offers.Core.Entities.Advisor", b =>
                {
                    b.Navigation("Collaborations");

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("InvestTracker.Offers.Core.Entities.InvestmentStrategy", b =>
                {
                    b.Navigation("Collaborations");
                });

            modelBuilder.Entity("InvestTracker.Offers.Core.Entities.Investor", b =>
                {
                    b.Navigation("Collaborations");
                });
#pragma warning restore 612, 618
        }
    }
}
