// <auto-generated />
using System;
using InvestTracker.Notifications.Core.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InvestTracker.Notifications.Core.Persistence.Migrations
{
    [DbContext(typeof(NotificationsDbContext))]
    partial class NotificationsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("notifications")
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InvestTracker.Notifications.Core.Entities.GlobalNotificationSetup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AdministratorsActivity")
                        .HasColumnType("boolean");

                    b.Property<bool>("AssetActivity")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("EnableEmails")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableNotifications")
                        .HasColumnType("boolean");

                    b.Property<bool>("ExistingCollaborationsActivity")
                        .HasColumnType("boolean");

                    b.Property<bool>("InvestmentStrategiesActivity")
                        .HasColumnType("boolean");

                    b.Property<bool>("NewCollaborationsActivity")
                        .HasColumnType("boolean");

                    b.Property<bool>("PortfoliosActivity")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("GlobalNotificationSetup", "notifications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f195c206-a475-4bdb-8a70-2575f0ab35b6"),
                            AdministratorsActivity = false,
                            AssetActivity = true,
                            EffectiveFrom = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnableEmails = false,
                            EnableNotifications = true,
                            ExistingCollaborationsActivity = true,
                            InvestmentStrategiesActivity = true,
                            NewCollaborationsActivity = true,
                            PortfoliosActivity = true
                        });
                });

            modelBuilder.Entity("InvestTracker.Notifications.Core.Entities.Receiver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subscription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Receivers", "notifications");
                });

            modelBuilder.Entity("InvestTracker.Notifications.Core.Entities.Receiver", b =>
                {
                    b.OwnsOne("InvestTracker.Notifications.Core.Entities.PersonalNotificationSetup", "NotificationSetup", b1 =>
                        {
                            b1.Property<Guid>("ReceiverId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("AdministratorsActivity")
                                .HasColumnType("boolean");

                            b1.Property<bool>("AssetActivity")
                                .HasColumnType("boolean");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<bool>("EnableEmails")
                                .HasColumnType("boolean");

                            b1.Property<bool>("EnableNotifications")
                                .HasColumnType("boolean");

                            b1.Property<bool>("ExistingCollaborationsActivity")
                                .HasColumnType("boolean");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<bool>("InvestmentStrategiesActivity")
                                .HasColumnType("boolean");

                            b1.Property<DateTime?>("ModifiedAt")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<bool>("NewCollaborationsActivity")
                                .HasColumnType("boolean");

                            b1.Property<bool>("PortfoliosActivity")
                                .HasColumnType("boolean");

                            b1.HasKey("ReceiverId");

                            b1.ToTable("Receivers", "notifications");

                            b1.WithOwner()
                                .HasForeignKey("ReceiverId");
                        });

                    b.Navigation("NotificationSetup")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
