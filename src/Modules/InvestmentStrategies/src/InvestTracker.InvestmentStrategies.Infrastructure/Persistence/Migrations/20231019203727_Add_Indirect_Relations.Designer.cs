// <auto-generated />
using System;
using InvestTracker.InvestmentStrategies.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InvestTracker.InvestmentStrategies.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(InvestmentStrategiesDbContext))]
    [Migration("20231019203727_Add_Indirect_Relations")]
    partial class Add_Indirect_Relations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("investment-strategies")
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InvestTracker.InvestmentStrategies.Domain.Asset.Entities.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssetDataId")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PortfolioId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Assets", "investment-strategies");

                    b.HasDiscriminator<string>("Type").HasValue("Asset");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("InvestTracker.InvestmentStrategies.Domain.Asset.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("AssetId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("Transactions", "investment-strategies");

                    b.HasDiscriminator<string>("Type").HasValue("Transaction");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("InvestTracker.InvestmentStrategies.Domain.Collaborations.Entities.Collaboration", b =>
                {
                    b.Property<Guid>("PrincipalId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdvisorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("PrincipalId", "AdvisorId");

                    b.ToTable("Collaborations", "investment-strategies");
                });

            modelBuilder.Entity("InvestTracker.InvestmentStrategies.Domain.InvestmentStrategies.Entities.InvestmentStrategy", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Collaborators")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsShareEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Owner")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("InvestmentStrategies", "investment-strategies");
                });

            modelBuilder.Entity("InvestTracker.InvestmentStrategies.Domain.InvestmentStrategies.Entities.Portfolio", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Assets")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("InvestmentStrategyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InvestmentStrategyId");

                    b.ToTable("Portfolios", "investment-strategies");
                });

            modelBuilder.Entity("InvestTracker.InvestmentStrategies.Domain.Stakeholders.Entities.Stakeholder", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subscription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Stakeholders", "investment-strategies");
                });

            modelBuilder.Entity("InvestTracker.InvestmentStrategies.Infrastructure.DataCollectors.ExchangeRates.ExchangeRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Metadata")
                        .HasMaxLength(1500)
                        .HasColumnType("character varying(1500)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Value")
                        .HasPrecision(12, 4)
                        .HasColumnType("numeric(12,4)");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("To");

                    b.ToTable("ExchangeRates", "investment-strategies");
                });

            modelBuilder.Entity("InvestTracker.InvestmentStrategies.Domain.Asset.Entities.Assets.Cash", b =>
                {
                    b.HasBaseType("InvestTracker.InvestmentStrategies.Domain.Asset.Entities.Asset");

                    b.HasDiscriminator().HasValue("Cash");
                });

            modelBuilder.Entity("InvestTracker.InvestmentStrategies.Domain.Asset.Entities.Assets.EdoTreasuryBond", b =>
                {
                    b.HasBaseType("InvestTracker.InvestmentStrategies.Domain.Asset.Entities.Asset");

                    b.HasDiscriminator().HasValue("EdoTreasuryBond");
                });

            modelBuilder.Entity("InvestTracker.InvestmentStrategies.Domain.Asset.Entities.Transactions.IncomingTransaction", b =>
                {
                    b.HasBaseType("InvestTracker.InvestmentStrategies.Domain.Asset.Entities.Transaction");

                    b.HasDiscriminator().HasValue("IncomingTransaction");
                });

            modelBuilder.Entity("InvestTracker.InvestmentStrategies.Domain.Asset.Entities.Transactions.OutgoingTransaction", b =>
                {
                    b.HasBaseType("InvestTracker.InvestmentStrategies.Domain.Asset.Entities.Transaction");

                    b.HasDiscriminator().HasValue("OutgoingTransaction");
                });

            modelBuilder.Entity("InvestTracker.InvestmentStrategies.Domain.Asset.Entities.Transaction", b =>
                {
                    b.HasOne("InvestTracker.InvestmentStrategies.Domain.Asset.Entities.Asset", null)
                        .WithMany("Transactions")
                        .HasForeignKey("AssetId");
                });

            modelBuilder.Entity("InvestTracker.InvestmentStrategies.Domain.InvestmentStrategies.Entities.Portfolio", b =>
                {
                    b.HasOne("InvestTracker.InvestmentStrategies.Domain.InvestmentStrategies.Entities.InvestmentStrategy", null)
                        .WithMany("Portfolios")
                        .HasForeignKey("InvestmentStrategyId");
                });

            modelBuilder.Entity("InvestTracker.InvestmentStrategies.Domain.Asset.Entities.Asset", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("InvestTracker.InvestmentStrategies.Domain.InvestmentStrategies.Entities.InvestmentStrategy", b =>
                {
                    b.Navigation("Portfolios");
                });
#pragma warning restore 612, 618
        }
    }
}
